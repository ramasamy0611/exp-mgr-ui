
06-05-2020:
-----------
story2: - Task5
    sign failure
TODO - story4 task2
    add docker env for UI

02-05-2020:
----------
TODO - story4 task2
    add docker env for UI

01-05-2020:
-----------
story4
    Task1 - Added all possible query methods for expense
24-04-2020:
-----------
depriortizied- for now
Apply auth in Angular
    oAuth2
Apply filters in Spring Boot
    --do filter
    --oAuth 2

23-04-2020:
-----------
Apply filters in Spring Boot -- partially -
       webconfigurer works as a file
            -- restricted origin and headers


19-04-2020:
-----------
Add user from UI was success

15-04-2020: --done
----------
Fix the http post method and commit
if fails the start understanding the http and make a simple get request to back end

24-04-2020:
-----------
Apply auth in Angular
    oAuth2
Apply filters in Spring Boot
    --do filter
    --oAuth 2

23-04-2020:
-----------
Apply filters in Spring Boot -- partially -
       webconfigurer works as a file
            -- restricted origin and headers


19-04-2020:
-----------
Add user from UI was success

15-04-2020: --done
----------
Fix the http post method and commit
if fails the start understanding the http and make a simple get request to back end

Vision:
=======
Story1:
    Authentication:
        Apply auth in Angular
            oAuth2
                Task1: set up an authentication server in docker
                Task2: create interceptor
                    set and validate token here
        Apply filters in Spring Boot
            Task1: oAuth 2
                validate the token from UI against the authentication server
             --do filter
Story2:
    User Management
        Task1: Add
        Task2: Delete
        Task3: Update(some info)
        Task4: Sign in
        Task5: Sign failure should redirect to sing in page again with the error message received from back end
Story3:
    Expense management
        Front end
            UI page
                Task1: page data validate
                Task2: Navigate to other pages
            Expense data
                Task1: Create pojo
Story4:
    Expense management - Backend
        As a User I should be able to record and view the expense details of a the family
            Task1: Add REST endpoint in backend to add/update/delete/view expense records
                --Add validations
                --
            Task2: Build GUI to allow User to add/update/delete/view expense records

    ExpenseCategories.txt
        UI
            show the usage/expense graph
            show the prediction of prices- based on the market
Story:
    Prepare docker image for UI
Story:
    Grafana/graphite integration
        Task1:
            set up graphite/grafana server in docker
            integrate with backend

Story:
    Get Product prices from external RESTFul services online
Story:
    Get Product Nutrition data from external RESTFul services online

Story:
    Adding Logging support using ELK if possible
Story:
    Make docker containers for all components
Story:
    Support CI/CD using jenkins
Story:
    SetUp a prod server in cloud/local server with complete cloud like set up


Done:
-----
Story0:
    Basics set up from ground
        Apply filters in Spring Boot -- done
               webconfigurer works as a file
                    -- restricted origin and headers

        Add user from UI was success


        Fix the http post method and commit
        if fails the start understanding the http and make a simple get request to back end

